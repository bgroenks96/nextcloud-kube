#!/bin/bash
# Deploys an instance of nextcloud on the server.
# Usage:
# deploy <NAME> <DOMAIN>
# where <NAME> should be replaced by the user-specified identifier for this deployment and
# <DOMAIN> should be replaced by the domain name which will resolve to the load balancer IP

export FLAGS_HELP="USAGE: $(basename $0) [OPTIONS] [NAME] [DOMAIN] \
where NAME is the user-specified identifier for this release, \
and DOMAIN is the user-configured host name for Nextcloud."

# source shflags
. ./lib/shflags

DEFINE_boolean dry-run 1 "generate release config without applying changes" d
DEFINE_boolean staging 1 "use staging TLS certificate (for debugging only)"
DEFINE_string storage '50Gi' "size of persistent data storage volume" s

# parse the command-line
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

EXTRA_ARGS=""

if [[ -z "$1" || -z "$2" ]]
  then
    echo "ERROR: Both NAME and DOMAIN must be supplied."
    $0 --help
    exit 1
fi

if [[ $FLAGS_staging -eq FLAGS_TRUE ]]
  then
    CERTTYPE="staging"
  else
    CERTTYPE="prod"
fi

if [[ $FLAGS_dry_run -eq FLAGS_TRUE ]]
  then
    echo "WARNING: Dry run; no changes will be applied to the cluster"
    EXTRA_ARGS="--dry-run"
fi

RELEASE="$1"
DOMAIN="$2"

# Define generic function to generate configuration files from templates
generate_from_template () {
  local filename="$1"
  cat templates/$filename \
      | sed -e "s/DBPASS/$DBPASS/g" \
      | sed -e "s/RELEASE/$RELEASE/g" \
      | sed -e "s/DOMAIN.COM/$DOMAIN/g"  \
      | sed -e "s/SIZE/$FLAGS_storage/g" \
      | sed -e "s/CERTTYPE/$CERTTYPE/g" > releases/$RELEASE/$filename
}

if [[ -z "$DBPASS" ]]
  # generate new database passcode if none already set
  then
    DBPASS=$(openssl rand -hex 16)
    echo "Generated new database password: $DBPASS"
fi

mkdir -p releases/$RELEASE

# Create namespace
[[ $FLAGS_dry_run -eq FLAGS_FALSE ]] && kubectl create namespace $RELEASE

# Create new volume
generate_from_template storage.yaml
kubectl apply $EXTRA_ARGS --namespace $RELEASE -f releases/$RELEASE/storage.yaml

# Deploy MySQL database
generate_from_template mysql.values.yaml
helm install "$RELEASE-db" stable/mysql --namespace $RELEASE $EXTRA_ARGS -f releases/$RELEASE/mysql.values.yaml

# Deploy NextCloud
generate_from_template nextcloud.values.yaml
helm install "$RELEASE" nextcloud/nextcloud --namespace $RELEASE $EXTRA_ARGS -f releases/$RELEASE/nextcloud.values.yaml

# Configure NextCloud ingress controller
# NOTE: No longer necessary with built-in NextCloud ingress controller
#cat templates/ingress.yaml \
#    | sed -e "s/RELEASE/$RELEASE/g" \
#    | sed -e "s/DOMAIN.COM/$DOMAIN/g" > releases/$RELEASE/ingress.yaml
#[[ $FLAGS_dry_run -eq FLAGS_FALSE ]] && kubectl apply -f releases/$RELEASE/ingress.yaml

if [[ $FLAGS_dry_run -eq FLAGS_FALSE ]];
  then
    IP=$(kubectl get service nginx-ingress-controller --namespace kube-system -o jsonpath='{.status.loadBalancer.ingress[*].ip}')
    echo "Deployment complete. NextCloud service is exposed at address $IP"
    echo "Note that NextCloud is only accessible via the configured domain name, $DOMAIN"
    echo "You must add a DNS A-record via your domain provider which points to $IP"
fi
